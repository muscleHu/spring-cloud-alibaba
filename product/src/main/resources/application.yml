server:
  port: 8001
spring:
  application:
    name: product
  profiles:
    active: dev # 环境
  main:
    allow-bean-definition-overriding: true
#shadingjdbc 分表配置
#  shardingsphere:
#    datasource:
#      names: test
#      test:
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        jdbc-url: jdbc:mysql://124.223.42.211:3306/test
#        username: root
#        password: 123654
#    sharding:
#      tables:
#        user:
#          actual-data-nodes: test.kp_user_$->{1..2}
#          key-generator:
#            column: id
#            type: SNOWFLAKE
#          table-strategy:
#            inline:
#              sharding-column: id
#              algorithm-expression: kp_user_$->{id % 2 + 1}
#    props:
#      sql:
#        show: true

#shadingjdbc 分库配置
  shardingsphere:
    datasource:
      names: kp1,kp2
      # 这里的名称需要在datasource.names中存在
      kp1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://124.223.42.211:3306/kp_001
        username: root
        password: 123654
      kp2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://124.223.42.211:3306/kp_002
        username: root
        password: 123654
    rules:
      sharding:
        tables:
          # 需要分片的表名，逻辑名，随意
          user:
            # 数据节点配置kp${}组成上面names中的数据源名称, 1..2代表 1到2之间的数值
            # 数据库中表的语法：schema.表名 = database.表名
            actual-data-nodes: kp$->{1..2}.user
            # 分库策略
            database-strategy:
              # 使用inline分片算法
              inline:
                # 分片键 为表中某个字段
                sharding-column: shading_key
                # 具体分片时的表达式
                algorithm-expression: kp_$->{shading_key}
    props:
      sql.show: true

